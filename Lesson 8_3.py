# Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
# Проверить работу исключения на реальном примере. Запрашивать у пользователя данные и заполнять список необходимо только числами.
# Класс-исключение должен контролировать типы данных элементов списка.

#Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу скрипта, введя, например, команду «stop».
# При этом скрипт завершается, сформированный список с числами выводится на экран.
#Подсказка: для этого задания примем, что пользователь может вводить только числа и строки.
# Во время ввода пользователем очередного элемента необходимо реализовать проверку типа элемента.
# Вносить его в список, только если введено число. Класс-исключение должен не позволить пользователю ввести текст (не число) и отобразить соответствующее сообщение.
# При этом работа скрипта не должна завершаться.


class ListOfNumbers (Exception):
    def __init__(self):
        pass


class TypeCheck:
    def __init__(self):
        self.my_list = []

    def check_n(self):
        global user_number
        while True:
            try:
                try:
                    user_number = int(input("Введите число: "))
                    ex = input(f"В список добавлено {user_number}. Продолжаем составлять список - введите число. Достаточно - введите 'n': ").lower()
                    self.my_list.append(user_number)
                    if ex == 'n':
                        print(self.my_list)
                        break
                except ValueError:
                    raise ListOfNumbers
            except ListOfNumbers:
                ex = input(f"Вы ввели не число! Хотите продолжить? y/n: ").lower()
                if ex == 'n':
                    print(self.my_list)
                    break
                else:
                    self.check_n()


a = TypeCheck()
a.check_n()
